<script type="text/javascript">
  // Shared between index and search
  // !! The div to put results in must be named search_results
  // !! The folllowing global vars must be set :
  //      results_pagination.page
  //      results_pagination.sort
  //      filter.type
  //      filter.prm

  // needs a global search_type
  function switchView(type) {
    Cdp.search.type = type;
    loadMyResults(Cdp.search);
  }

  function loadMyResults(search_obj) {

    // Show the user there's a request running
    $('search_results').morph('opacity: 0.2; filter: alpha(opacity=20);');
    $('container').setStyle({cursor: 'wait'});

    // Choose URL
    var url;
    switch(search_obj.type) {
      case 'occurrences' : url = <%= "'" + url_for(:controller => 'ajax', :action => 'show_occurrences') + "'" %> ; break;
      case 'species_list' : url = <%= "'" + url_for(:controller => 'ajax', :action => 'show_specieslist') + "'" %>
    }

    new Ajax.Request(url, {
              method: 'get',
              parameters: {
                'page_num' :   search_obj.results_configuration.page,   // only useful if occurrences search type
                'sort_field' : search_obj.results_configuration.sort,   // idem
                'georef_create_link': search_obj.results_configuration.map_on_page, // idem
                'filters' : Object.toJSON(search_obj.filters)

              },
              onSuccess: function(transport) {
                $('search_results').update(transport.responseText);
                $('search_results').morph('opacity: 1; filter: alpha(opacity=100);');
                $('container').setStyle({cursor: 'default'});
              }
            })

  }



      // type must be 'occurrences' || 'species_list'
      function loadResults(type) {
 
        $('search_results').morph('opacity: 0.2; filter: alpha(opacity=20);');
        $('container').setStyle({cursor: 'wait'});

        var url;
        switch(type) {
          case 'occurrences' : url=<%= "'" + url_for(:controller => 'pages', :action => 'ajax_occurrences') + "'" %> ; break;
            case 'species_list' : url=<%= "'" + url_for(:controller => 'pages', :action => 'ajax_species_list') + "'" %>
            }

            new Ajax.Request(url, {
              method: 'get',
              parameters: {
                'page_num' :   results_pagination.page,
                'sort_field' : results_pagination.sort,
                'filter_type' : filter.type,
                'filter_param' : filter.prm,
                'georef_create_link': georef_create_link
              },
              onSuccess: function(transport) {
                $('search_results').update(transport.responseText);
                $('search_results').morph('opacity: 1; filter: alpha(opacity=100);');
                $('container').setStyle({cursor: 'default'});
              }
            })
          }

          function urlForExport(format) {
            return encodeURI('<%= url_for :controller => 'ajax', :action => 'export_occurrences' %>?format=' + format + '&filters=' + Object.toJSON(Cdp.search.filters));

          }

          function jumpToPage(search_obj, page_num) {
            search_obj.results_configuration.page = page_num;
            loadMyResults(search_obj);
          }

          function sortByField(search_obj, field_name) {
            search_obj.results_configuration.sort = field_name;
            loadMyResults(search_obj);
          }

          // To put things in place after a new search (page 1, ...)
          function resetSr(search_obj) {
            search_obj.results_configuration.page = 1;
          }

          function occurrenceDetails(occurrence_id, height) {
            window.open('<%= url_for :controller => 'pages', :action => 'occurrence_details' %>?id='+occurrence_id, '_blank', 'left=20,top=20,width=500,height=' + height + ',toolbar=0,resizable=0, scrollbars=1');
          }

          // Only for index, but placed here because we need erb
          function showResultsOnMap(search_obj) {
            // Make an AJAX request to get the coordinates of all occurrences that match
            // the current search filters.
            var url = '<%= url_for :controller => 'ajax', :action => 'get_geodata' %>'

            new Ajax.Request(url, {
              method: 'get',
              parameters: {
                'filters' : Object.toJSON(search_obj.filters)
              },
              onSuccess: function(transport) {
                resp = transport.responseText.evalJSON();
                //console.log(resp)
                var i;
                //console.dir(resp);
                for (i in resp) {
                  if (typeof resp[i] !== 'function') {
                    // i contains occurence_id
                    // resp[i].lat and resp[i].lon contains coordinates (ESPG4326 returned by server)
                    // resp[i].precision contains the precision in meters
                    showPointOnMap(resp[i].lat, resp[i].lon, resp[i].precision, false);
                  }
                }

                // Zoom to results extent
                map.zoomToExtent(markers.getDataExtent());

              }
            });

          }

</script>
